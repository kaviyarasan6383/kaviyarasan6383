
@@ -0,0 +1,652 @@

@@ -0,0 +1,650 @@
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "406ab8ce",
   "metadata": {},
   "source": [
    " ASSIGNMENT - 3  \n",
    "                              "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2fa8506",
   "metadata": {},
   "source": [
    "1.Download the dataset: Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6156459c",
   "metadata": {},
   "source": [
    "2.IMAGE AUGMENTATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fc34cad1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4b14680",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_datagen=ImageDataGenerator(rescale=1./255,horizontal_flip=True,vertical_flip=True,zoom_range=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b22d69f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_datagen=ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb38a22a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 4317 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "x_train=train_datagen.flow_from_directory(r\"C:\\Users\\Acer\\Downloads\\Flowers-Dataset\\flowers\",target_size=(64,64),\n",
    "                                                            class_mode=\"categorical\",batch_size=24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b1c1813c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 4317 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "x_test=test_datagen.flow_from_directory(r\"C:\\Users\\Acer\\Downloads\\Flowers-Dataset\\flowers\",target_size=(64,64),\n",
    "                                                            class_mode=\"categorical\",batch_size=24)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a7798c3",
   "metadata": {},
   "source": [
    "3,4. CREATE MODEL: Add Layers (Convolution,MaxPooling,Flatten,Dense-(Hidden Layers),Output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5251a5d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "44e578dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e16cbe29",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b08a8bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Convolution2D(32,(3,3),activation=\"relu\",input_shape=(64,64,3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7e80e337",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPooling2D(pool_size=(2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3f5d5d36",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "94501b37",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(300,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6255d4a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(300,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f24ccfa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(5,activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffd5ff6d",
   "metadata": {},
   "source": [
    "5.COMPILE THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f04b25ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"categorical_crossentropy\",metrics=[\"accuracy\"],optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c087a88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "180"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "927c72cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "180"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a202252b",
   "metadata": {},
   "source": [
    "6.FIT THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bf8c1e65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "180/180 [==============================] - 379s 2s/step - loss: 1.2657 - accuracy: 0.4681 - val_loss: 1.0761 - val_accuracy: 0.5798\n",
      "Epoch 2/5\n",
      "180/180 [==============================] - 138s 767ms/step - loss: 1.0503 - accuracy: 0.5784 - val_loss: 0.9687 - val_accuracy: 0.6115\n",
      "Epoch 3/5\n",
      "180/180 [==============================] - 128s 711ms/step - loss: 0.9889 - accuracy: 0.6092 - val_loss: 0.8925 - val_accuracy: 0.6461\n",
      "Epoch 4/5\n",
      "180/180 [==============================] - 123s 683ms/step - loss: 0.9120 - accuracy: 0.6426 - val_loss: 0.8636 - val_accuracy: 0.6720\n",
      "Epoch 5/5\n",
      "180/180 [==============================] - 123s 684ms/step - loss: 0.8624 - accuracy: 0.6613 - val_loss: 0.8027 - val_accuracy: 0.6933\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2187cc81a30>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train,epochs=5,validation_data=x_test,steps_per_epoch=len(x_train),validation_steps=len(x_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf83cff5",
   "metadata": {},
   "source": [
    "7.SAVE THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3c55940a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"flower1.h5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a478ace",
   "metadata": {},
   "source": [
    "8.TEST THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e2f576b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing import image \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "baf88da1",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=load_model(\"flower1.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e6d6c223",
   "metadata": {},
   "outputs": [],
   "source": [
    "img=image.load_img(\"5794835_d15905c7c8_n.jpg\",target_size=(64,64))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f6b5026",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=64x64 at 0x168B8727D00>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2a80ace5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PIL.Image.Image"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "558ee8ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = image.img_to_array(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1f27cca9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 75.,  89.,  36.],\n",
       "        [ 78.,  93.,  38.],\n",
       "        [ 77.,  92.,  35.],\n",
       "        ...,\n",
       "        [ 94.,  95.,  53.],\n",
       "        [ 93.,  91.,  52.],\n",
       "        [ 80.,  91.,  48.]],\n",
       "\n",
       "       [[ 76.,  91.,  36.],\n",
       "        [ 80.,  95.,  36.],\n",
       "        [ 78.,  93.,  34.],\n",
       "        ...,\n",
       "        [112., 105.,  63.],\n",
       "        [104.,  99.,  57.],\n",
       "        [ 91.,  92.,  52.]],\n",
       "\n",
       "       [[ 79.,  94.,  39.],\n",
       "        [ 82.,  97.,  38.],\n",
       "        [ 81.,  97.,  34.],\n",
       "        ...,\n",
       "        [122., 110.,  70.],\n",
       "        [114., 106.,  67.],\n",
       "        [101.,  99.,  58.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[118., 119., 105.],\n",
       "        [127., 121., 109.],\n",
       "        [134., 128., 116.],\n",
       "        ...,\n",
       "        [109., 129.,  68.],\n",
       "        [110., 127.,  72.],\n",
       "        [111., 123.,  73.]],\n",
       "\n",
       "       [[133., 127., 115.],\n",
       "        [133., 131., 116.],\n",
       "        [142., 136., 124.],\n",
       "        ...,\n",
       "        [ 83., 104.,  47.],\n",
       "        [ 80., 104.,  46.],\n",
       "        [ 91., 103.,  55.]],\n",
       "\n",
       "       [[142., 133., 124.],\n",
       "        [144., 136., 125.],\n",
       "        [144., 138., 126.],\n",
       "        ...,\n",
       "        [ 72.,  93.,  37.],\n",
       "        [ 72.,  94.,  47.],\n",
       "        [ 77.,  90.,  47.]]], dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "82ef450e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(64, 64, 3)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1391355",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.expand_dims(x,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "33d21c7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 64, 64, 3)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a5df1a13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 1s 595ms/step\n"
     ]
    }
   ],
   "source": [
    "pred_prob = model.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "971f4fb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "33562758",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_name=[\"daisy\",\"dandelio\",\"rose\",\"sunflower\",\"tulip\"]\n",
    "pred_id = pred_prob.argmax(axis=1)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "066314ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "35458b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predicted animal is  daisy\n"
     ]
    }
   ],
   "source": [
    "print(\"predicted animal is \",str(class_name[pred_id]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1328746f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}